{ 
  "demo/src/main/DAG.py ": 
{"imports":["airflow.DAG","airflow.operators.python_operator.PythonOperator","datetime.datetime","datetime.timedelta","typing.Callable"],"classes":[{"name":"BaseTask","extendedClasses":[],"annotations":[],"methods":[{"name":"__init__","returnType":"None","parameters":["self","task_id","python_callable"],"body":"    def __init__(self, task_id: str, python_callable: Callable) -> None:\n        self.task_id = task_id\n        self.python_callable = python_callable","annotations":[]},{"name":"create_task","returnType":"PythonOperator","parameters":["self","dag"],"body":"    def create_task(self, dag: DAG) -> PythonOperator:\n        return PythonOperator(\n            task_id=self.task_id,\n            python_callable=self.python_callable,\n            dag=dag,\n        )","annotations":[]}]},{"name":"DataTask","extendedClasses":["BaseTask"],"annotations":[],"methods":[{"name":"__init__","returnType":"None","parameters":["self","task_id","data"],"body":"    def __init__(self, task_id: str, data: str) -> None:\n        super().__init__(task_id, self.process_data)\n        self.data = data","annotations":[]},{"name":"process_data","returnType":"None","parameters":["self"],"body":"    def process_data(self) -> None:\n        print(f\" Processing data tas k {self.task_id} with data: {self.data}\")","annotations":[]}]},{"name":"ComputeTask","extendedClasses":["BaseTask"],"annotations":[],"methods":[{"name":"__init__","returnType":"None","parameters":["self","task_id","operation"],"body":"    def __init__(self, task_id: str, operation: str) -> None:\n        super().__init__(task_id, self.process_compute)\n        self.operation = operation","annotations":[]},{"name":"process_compute","returnType":"None","parameters":["self"],"body":"    def process_compute(self) -> None:\n        print(f\"Processing compute task {self.task_id} with operation: {self.operation}\")","annotations":[]}]}],"functions":[],"function_dependencies":{"create_task":["PythonOperator"],"__init__":["super"],"process_data":["print"],"process_compute":["print"]},"DAG":["data_task2_op >> compute_task_op","data_task1_op >> compute_task_op"]}  , "demo/src/main/java/Cube.java ": 
{"imports":["java.util"],"classes":[{"name":"Cube","annotations":[],"extendedClass":"","implementedInterfaces":["Cloneable"],"fields":[{"name":"nextEdgePos","type":"Map<Character, EdgePos>","annotations":[]},{"name":"nextCornerPos","type":"Map<Character, CornerPos>","annotations":[]},{"name":"nextEdgeOrientation","type":"Map<Character, List<Map<Byte, Byte>>>","annotations":[]},{"name":"nextCornerOrientation","type":"Map<Character, List<Map<Byte, Byte>>>","annotations":[]},{"name":"edgeList","type":"byte[][]","annotations":[]},{"name":"cornerList","type":"byte[][]","annotations":[]},{"name":"binEncoding","type":"Map<Character, Byte>","annotations":[]},{"name":"priority","type":"Map<Character, Byte>","annotations":[]},{"name":"edgeNumberForPos","type":"Map<Byte, Byte>","annotations":[]},{"name":"cornerNumberForPos","type":"Map<Byte, Byte>","annotations":[]},{"name":"edgePossiblePlacesStage3","type":"int[][]","annotations":[]},{"name":"cornerPossiblePlacesStage3","type":"int[][]","annotations":[]},{"name":"edge","type":"Edge","annotations":[]},{"name":"corner","type":"Corner","annotations":[]}],"methods":[{"name":"clone","returnType":"Cube","annotations":["Override"],"parameters":[],"body":"{\n    return new Cube(this.getEdge().clone(), this.getCorner().clone());\n}"},{"name":"execute","returnType":"Cube","annotations":[],"parameters":["Cube c","String s"],"body":"{\n    Cube temp = c.clone();\n    String[] moves = s.split(\" \");\n    if (moves.length > 1) {\n        StringBuilder sBuilder = new StringBuilder();\n        for (String string : moves) {\n            if (string.length() == 1)\n                sBuilder.append(string.charAt(0));\n            else if (string.charAt(1) == '2')\n                sBuilder.append(String.valueOf(string.charAt(0)).repeat(2));\n            else\n                sBuilder.append(String.valueOf(string.charAt(0)).repeat(3));\n        }\n        s = sBuilder.toString();\n    }\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        EdgePos edgePos = temp.getEdge().getEdgePos().clone();\n        EdgeOrientation edgeOrientation = temp.getEdge().getEdgeOrientation().clone();\n        for (int j = 0; j < 12; j++) {\n            edgeOrientation.setVal(j, nextEdgeOrientation.get(ch).get(edgePos.getVal()[j]).get(edgeOrientation.getVal()[j]));\n            edgePos.setVal(j, nextEdgePos.get(ch).getVal()[edgePos.getVal()[j]]);\n        }\n        temp.setEdge(new Edge(edgePos, edgeOrientation));\n        CornerPos cornerPos = temp.getCorner().getCornerPos().clone();\n        CornerOrientation cornerOrientation = temp.getCorner().getCornerOrientation().clone();\n        for (int j = 0; j < 8; j++) {\n            cornerOrientation.setVal(j, nextCornerOrientation.get(ch).get(cornerPos.getVal()[j]).get(cornerOrientation.getVal()[j]));\n            cornerPos.setVal(j, nextCornerPos.get(ch).getVal()[cornerPos.getVal()[j]]);\n        }\n        temp.setCorner(new Corner(cornerPos, cornerOrientation));\n    }\n    return temp;\n}"},{"name":"reverseAlgorithm","returnType":"String","annotations":[],"parameters":["String s"],"body":"{\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) result.append(String.valueOf(s.charAt(i)).repeat(3));\n    return new StringBuilder(result.toString()).reverse().toString();\n}"},{"name":"getAlgorithm","returnType":"ArrayList<String>","annotations":[],"parameters":["String moves"],"body":"{\n    class Temp {\n\n        final char ch;\n\n        final byte b;\n\n        public Temp(char ch, byte b) {\n            this.ch = ch;\n            this.b = b;\n        }\n    }\n    Stack<Temp> s = new Stack<>();\n    ArrayList<String> v = new ArrayList<>(Arrays.asList(\"\", \"\", \"2\", \"'\"));\n    ArrayList<String> result = new ArrayList<>();\n    for (int i = 0; i < moves.length(); i++) {\n        if (s.isEmpty() || s.peek().ch != moves.charAt(i))\n            s.push(new Temp(moves.charAt(i), (byte) 1));\n        else {\n            Temp x = s.pop();\n            if (x.b != (byte) 3)\n                s.push(new Temp(x.ch, (byte) (x.b + 1)));\n        }\n    }\n    while (!s.isEmpty()) {\n        Temp x = s.pop();\n        if (x.b != 0)\n            result.add(0, x.ch + v.get(x.b));\n    }\n    return result;\n}\n[Local class: Temp]"},{"name":"toString","returnType":"String","annotations":["Override"],"parameters":[],"body":"{\n    return \"Cube{\\n\" + \"edge=\" + edge.toString() + \",\\ncorner=\" + corner.toString() + \"\\n}\";\n}"},{"name":"getEdge","returnType":"Edge","annotations":[],"parameters":[],"body":"{\n    return edge;\n}"},{"name":"setEdge","returnType":"void","annotations":[],"parameters":["Edge edge"],"body":"{\n    this.edge = edge;\n}"},{"name":"getCorner","returnType":"Corner","annotations":[],"parameters":[],"body":"{\n    return corner;\n}"},{"name":"setCorner","returnType":"void","annotations":[],"parameters":["Corner corner"],"body":"{\n    this.corner = corner;\n}"}],"nestedClasses":[{"name":"Temp","annotations":[],"extendedClass":"","implementedInterfaces":[],"fields":[{"name":"ch","type":"char","annotations":[]},{"name":"b","type":"byte","annotations":[]}],"methods":[],"nestedClasses":[]}]}]}  , "demo/src/main/java/com/example/demo/DemoApplication.java ": 
{"imports":["org.springframework.boot.SpringApplication","org.springframework.boot.autoconfigure.SpringBootApplication"],"classes":[{"name":"DemoApplication","annotations":["SpringBootApplication"],"extendedClass":"","implementedInterfaces":[],"fields":[],"methods":[{"name":"main","returnType":"void","annotations":[],"parameters":["String[] args"],"body":"{\n    SpringApplication.run(DemoApplication.class, args);\n}"}],"nestedClasses":[]}]}  , "demo/src/test/java/com/example/demo/DemoApplicationTests.java ": 
{"imports":["org.junit.jupiter.api.Test","org.springframework.boot.test.context.SpringBootTest"],"classes":[{"name":"DemoApplicationTests","annotations":["SpringBootTest"],"extendedClass":"","implementedInterfaces":[],"fields":[],"methods":[{"name":"contextLoads","returnType":"void","annotations":["Test"],"parameters":[],"body":"{\n}"}],"nestedClasses":[]}]}} 
